package bot

import (
	"database/sql"
	"fmt"
	"github.com/joho/godotenv"
	"github.com/sirupsen/logrus"
	"log"
	"main/internal/crm"
	"os"
	"testing"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/stretchr/testify/mock"

	_ "github.com/jackc/pgx/v4/stdlib"
)

type MockTelegramAPI struct {
	chatID    int64
	messageID int
	mock.Mock
	Updates chan tgbotapi.Update
}

type TestCase struct {
	userMessage func() tgbotapi.Update
	expected    func() []tgbotapi.Chattable
}

type TestNow struct{}

const BranchId int64 = 3
const UserId int64 = 12345

var LOCATION, _ = time.LoadLocation("Europe/Moscow")

func (m *MockTelegramAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	args := m.Called(c)
	return args.Get(0).(tgbotapi.Message), args.Error(1)
}

func (m *MockTelegramAPI) GetUpdatesChan(_ tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel {
	return m.Updates
}

func (t *TestNow) Now() time.Time {
	return time.Date(2024, 11, 9, 17, 0, 0, 0, LOCATION)
}

func createBot() (*Router, *MockTelegramAPI, *sql.DB) {
	err := godotenv.Load("../../configs/.env")
	if err != nil {
		panic(fmt.Errorf("error loading .env file: %w", err))
	}

	testDB, err := sql.Open("pgx", os.Getenv("TEST_DATABASE_URL"))
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	err = testDB.Ping()

	if err != nil {
		logrus.Panic(err)
	}
	testTGBot := &MockTelegramAPI{Updates: make(chan tgbotapi.Update, 1)}

	userTexts := NewUserTexts()
	dentalProClientTest := crm.NewDentalProClient("", "", true, "../crm")
	telegramBotHandler := NewTelegramBotHandler(
		testTGBot, *userTexts, dentalProClientTest, testDB, BranchId, LOCATION, &TestNow{},
	)
	return NewRouter(testTGBot, telegramBotHandler, true), testTGBot, testDB
}

func createTestMessage(chatID int64, messageID int, text string) *tgbotapi.Message {
	return &tgbotapi.Message{
		MessageID: messageID,
		Chat: &tgbotapi.Chat{
			ID: chatID,
		},
		Text: text,
		From: &tgbotapi.User{
			ID:       UserId,
			UserName: "testuser",
		},
	}
}

func createTestQuery(chatID int64, messageID int, data string) *tgbotapi.CallbackQuery {
	return &tgbotapi.CallbackQuery{
		From: &tgbotapi.User{
			ID:       UserId,
			UserName: "testuser",
		},
		Message: createTestMessage(chatID, messageID, ""),
		Data:    data,
	}
}

func createChat(chatID int64) *tgbotapi.Chat {
	return &tgbotapi.Chat{
		ID: chatID,
	}
}

func clearAllTables(db *sql.DB) error {
	_, err := db.Exec(`
        DO $$ DECLARE
            r RECORD;
        BEGIN
            FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
                EXECUTE 'TRUNCATE TABLE ' || quote_ident(r.tablename) || ' CASCADE';
            END LOOP;
        END $$;
    `)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: %v", err)
	}
	return err
}

func createContact() *tgbotapi.Contact {
	return &tgbotapi.Contact{
		PhoneNumber: "79999999999",
		LastName:    "Ivanov",
		FirstName:   "Ivan",
		UserID:      UserId,
	}
}

func checkCases(t *testing.T, router *Router, mockBot *MockTelegramAPI, chatID int64, cases []TestCase) {
	for i, _case := range cases {
		expectedMessages := _case.expected()
		mockBot.ExpectedCalls = nil
		for _, expectedMessage := range expectedMessages {
			var args interface{} = expectedMessage
			if expectedMessage == nil {
				args = mock.Anything
			}
			mockBot.On("Send", args).Return(
				*createTestMessage(chatID, mockBot.messageID, ""), nil,
			).Once()
		}
		router.TestWG.Add(1)
		mockBot.Updates <- _case.userMessage()
		router.TestWG.Wait()
		for _, expectedMessage := range expectedMessages {
			var expected interface{} = expectedMessage
			if expectedMessage == nil {
				expected = mock.Anything
			}
			if !mockBot.AssertCalled(t, "Send", expected) {
				return
			}
		}
		fmt.Printf("pass case #%d\n", i+1)
	}
}

func TestRegisterHandle(t *testing.T) {
	var chatID int64 = 1
	var router, mockBot, db = createBot()
	defer func(testDB *sql.DB) {
		_ = testDB.Close()
	}(db)

	err := clearAllTables(db)
	if err != nil {
		fmt.Println(err)
	}

	stopChan := make(chan struct{})
	go router.StartListening(stopChan)

	testCases := []TestCase{
		{ // 1
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 2, "/myrecords")
				message.Entities = []tgbotapi.MessageEntity{
					{Type: "bot_command", Length: len([]rune(message.Text))},
				}
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				expectedMessage := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±. –û–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>")
				phoneButton := tgbotapi.KeyboardButton{
					Text:           "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
					RequestContact: true,
				}
				keyboard := tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(phoneButton),
				)
				keyboard.OneTimeKeyboard = true
				expectedMessage.ReplyMarkup = keyboard
				expectedMessage.ParseMode = HTML
				return []tgbotapi.Chattable{expectedMessage}
			},
		},
		{ // 2
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 3, "random text")
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				expectedMessage := tgbotapi.NewMessage(chatID, "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>, \n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel ‚ùå")
				phoneButton := tgbotapi.KeyboardButton{
					Text:           "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
					RequestContact: true,
				}
				keyboard := tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(phoneButton),
				)
				keyboard.OneTimeKeyboard = true
				expectedMessage.ReplyMarkup = keyboard
				expectedMessage.ParseMode = HTML
				return []tgbotapi.Chattable{expectedMessage}
			},
		},
		{ // 3
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 4, "")
				message.Contact = createContact()
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				return []tgbotapi.Chattable{tgbotapi.NewMessage(chatID, "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π üìÖ")}
			},
		},
		{ // 4
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 5, "/start")
				message.Entities = []tgbotapi.MessageEntity{
					{Type: "bot_command", Length: len([]rune(message.Text))},
				}
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				return []tgbotapi.Chattable{tgbotapi.NewMessage(chatID, `–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–ª–∏–Ω–∏–∫—É ü¶∑‚ú® 

–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:
- üóìÔ∏è /record ‚Äî –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É
- üîÑ /move_record ‚Äî –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å
- üóëÔ∏è /delete_record ‚Äî –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º
- üìã /myrecords ‚Äî –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤–∏–∑–∏—Ç–∞—Ö
- ‚úèÔ∏è /change_name ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –≤ —Å–∏—Å—Ç–µ–º–µ
- ‚ùå /cancel ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É

–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.`)}
			},
		},
		{ // 5
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 6, "/record")
				message.Chat = createChat(chatID)
				message.Entities = []tgbotapi.MessageEntity{
					{Type: "bot_command", Length: len([]rune(message.Text))},
				}
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –Ω–∏–∂–µ üëá"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–∞–µ–≤–∞ –°.–ï. - –¢–µ—Ä–∞–ø–µ–≤—Ç—ã", `{"command":"select_doctor","d":2}`)},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í. - –ì–∏–≥–∏–µ–Ω–∏—Å—Ç—ã", `{"command":"select_doctor","d":12}`)},
					{tgbotapi.NewInlineKeyboardButtonData("–ö–æ—á–µ–Ω–æ–≤–∞ –ï.–î. - –ì–∏–≥–∏–µ–Ω–∏—Å—Ç—ã", `{"command":"select_doctor","d":14}`)},
					{tgbotapi.NewInlineKeyboardButtonData("–ì–∞–ª—É—Å—Ç—è–Ω –ê.–í. - –•–∏—Ä—É—Ä–≥–∏, –¢–µ—Ä–∞–ø–µ–≤—Ç—ã", `{"command":"select_doctor","d":15}`)},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∏—Ñ–∞–Ω–æ–≤ –ê.–ê. - –•–∏—Ä—É—Ä–≥–∏, –û—Ä—Ç–æ–ø–µ–¥—ã", `{"command":"select_doctor","d":16}`)},
					{tgbotapi.NewInlineKeyboardButtonData("–ï–≥–∏–∞–∑–∞—Ä—è–Ω –ê.–ê. - –¢–µ—Ä–∞–ø–µ–≤—Ç—ã, –û—Ä—Ç–æ–¥–æ–Ω—Ç—ã, –î–µ—Ç—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è", `{"command":"select_doctor","d":18}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 0, text, keyboard)
				return []tgbotapi.Chattable{
					tgbotapi.NewMessage(chatID, "–°–µ–∫—É–Ω–¥—É..."),
					exceptedMsg,
				}
			},
		},
		{ // 6
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 0, `{"command":"select_doctor","d":14}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤—Ä–∞—á–∞ –ö–æ—á–µ–Ω–æ–≤–∞ –ï.–î. –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ üòî."
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"doctors"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 0, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 7
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 0, `{"command":"select_doctor","d":2}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–∏–µ–º üåü."
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("(15 –º–∏–Ω.) –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.", `{"command":"appointment","a":41}`)},
					{tgbotapi.NewInlineKeyboardButtonData("(30 –º–∏–Ω.) –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.", `{"command":"appointment","a":86}`)},
					{tgbotapi.NewInlineKeyboardButtonData("(60 –º–∏–Ω.) –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.", `{"command":"appointment","a":25}`)},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"doctors"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 0, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 8
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 0, `{"command":"appointment","a":25}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å - –ü–æ–¥–∞–µ–≤–∞ –°.–ï.\n–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.\nüü¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("November 2024", "1")},
					{
						tgbotapi.NewInlineKeyboardButtonData("–ü–Ω", `–ü–Ω`),
						tgbotapi.NewInlineKeyboardButtonData("–í—Ç", `–í—Ç`),
						tgbotapi.NewInlineKeyboardButtonData("–°—Ä", `–°—Ä`),
						tgbotapi.NewInlineKeyboardButtonData("–ß—Ç", `–ß—Ç`),
						tgbotapi.NewInlineKeyboardButtonData("–ü—Ç", `–ü—Ç`),
						tgbotapi.NewInlineKeyboardButtonData("–°–±", `–°–±`),
						tgbotapi.NewInlineKeyboardButtonData("–í—Å", `–í—Å`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData(" ", `1`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `2`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `3`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `4`),
						tgbotapi.NewInlineKeyboardButtonData("1", `{"command":"day","dt":"2024.11.1","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("2", `{"command":"day","dt":"2024.11.2","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("3", `{"command":"day","dt":"2024.11.3","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("4", `{"command":"day","dt":"2024.11.4","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("5", `{"command":"day","dt":"2024.11.5","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("6", `{"command":"day","dt":"2024.11.6","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("7", `{"command":"day","dt":"2024.11.7","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("8", `{"command":"day","dt":"2024.11.8","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 9", `{"command":"day","dt":"2024.11.9","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("10", `{"command":"day","dt":"2024.11.10","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("11", `{"command":"day","dt":"2024.11.11","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 12", `{"command":"day","dt":"2024.11.12","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("13", `{"command":"day","dt":"2024.11.13","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("14", `{"command":"day","dt":"2024.11.14","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 15", `{"command":"day","dt":"2024.11.15","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 16", `{"command":"day","dt":"2024.11.16","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("17", `{"command":"day","dt":"2024.11.17","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 18", `{"command":"day","dt":"2024.11.18","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 19", `{"command":"day","dt":"2024.11.19","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("20", `{"command":"day","dt":"2024.11.20","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("21", `{"command":"day","dt":"2024.11.21","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 22", `{"command":"day","dt":"2024.11.22","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("23", `{"command":"day","dt":"2024.11.23","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("24", `{"command":"day","dt":"2024.11.24","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("25", `{"command":"day","dt":"2024.11.25","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 26", `{"command":"day","dt":"2024.11.26","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("27", `{"command":"day","dt":"2024.11.27","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("28", `{"command":"day","dt":"2024.11.28","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 29", `{"command":"day","dt":"2024.11.29","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 30", `{"command":"day","dt":"2024.11.30","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `1`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData(">", `{"command":"switch_timesheet_month","m":"2024.12","d":2}`),
					},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"appointments"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 0, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 9
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 0, `{"command":"day","dt":"2024.11.9","s":0}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–î–µ–Ω—å 09.11.2024\n–í—Ä–∞—á –ü–æ–¥–∞–µ–≤–∞ –°.–ï.\n–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è. üïí‚ú®"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{
						tgbotapi.NewInlineKeyboardButtonData("‚ùå 16:00 - 17:00", `{"command":"interval","s":"16:00"}`),
						tgbotapi.NewInlineKeyboardButtonData("18:00 - 19:00", `{"command":"interval","s":"18:00"}`),
					},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"calendar"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 0, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 9
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 0, `{"command":"day","dt":"2024.11.9","s":0}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–î–µ–Ω—å 09.11.2024\n–í—Ä–∞—á –ü–æ–¥–∞–µ–≤–∞ –°.–ï.\n–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è. üïí‚ú®"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{
						tgbotapi.NewInlineKeyboardButtonData("‚ùå 16:00 - 17:00", `{"command":"interval","s":"16:00"}`),
						tgbotapi.NewInlineKeyboardButtonData("18:00 - 19:00", `{"command":"interval","s":"18:00"}`),
					},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"calendar"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 0, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 10
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 0, `{"command":"interval","s":"16:00"}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "‚ö†Ô∏è –£–ø—Å! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–∂–µ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"calendar"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 0, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 12
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 0, `{"command":"interval","s":"18:00"}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := `–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ "–û–ª–∏–º–ø" –≤ –°–æ—Ñ—Ä–∏–Ω–æ

üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b><i>2024-11-09 18:00</i></b>
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: <b><i>–ü–æ–¥–∞–µ–≤–∞ –°.–ï.</i></b>
ü¶∑ –ù–∞ –ø—Ä–∏–µ–º: <b><i>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞. (60 –º–∏–Ω)</i></b>

–í—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫: <b><i>Ivanov Ivan</i></b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ.`
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", `{"command":"change_name","d":"register"}`)},
					{
						tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `{"command":"approve","d":"register"}`),
						tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"calendar"}`),
					},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 0, text, keyboard)
				exceptedMsg.ParseMode = HTML
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 13
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 0, `{"command":"approve","d":"register"}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º! üéâ

–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ "–û–ª–∏–º–ø" –≤ –°–æ—Ñ—Ä–∏–Ω–æ

üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b><i>2024-11-09 18:00:00</i></b>
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: <b><i>–ü–æ–¥–∞–µ–≤–∞ –°.–ï.</i></b>
ü¶∑ –ù–∞ –ø—Ä–∏–µ–º: <b><i>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞. (60 –º–∏–Ω)</i></b>

–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫: <b><i>Ivanov Ivan</i></b>

–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:
	/move_record üîÑ ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å
	/delete_record ‚ùå ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å

–ñ–¥–µ–º –≤–∞—Å! üòä`
				exceptedMsg := tgbotapi.NewEditMessageText(chatID, 0, text)
				exceptedMsg.ParseMode = HTML
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},

		// –í–∞–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É –≤—Ä–∞—á—É
		{ // 14
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 10, `{"command":"select_doctor","d":2}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –≤—Ä–∞—á—É, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è ü©∫‚ùó –∫ –Ω–µ–º—É"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"doctors"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 10, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},

		{ // 15
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"select_doctor","d":12}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–∏–µ–º üåü."
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("(30 –º–∏–Ω.) –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.", `{"command":"appointment","a":86}`)},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"doctors"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 15, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 16
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"appointment","a":86}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				return []tgbotapi.Chattable{nil}
			},
		},
		{ // 17
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"switch_timesheet_month","m":"2024.12","d":12}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å - –ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í.\n–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.\nüü¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("December 2024", "1")},
					{
						tgbotapi.NewInlineKeyboardButtonData("–ü–Ω", `–ü–Ω`),
						tgbotapi.NewInlineKeyboardButtonData("–í—Ç", `–í—Ç`),
						tgbotapi.NewInlineKeyboardButtonData("–°—Ä", `–°—Ä`),
						tgbotapi.NewInlineKeyboardButtonData("–ß—Ç", `–ß—Ç`),
						tgbotapi.NewInlineKeyboardButtonData("–ü—Ç", `–ü—Ç`),
						tgbotapi.NewInlineKeyboardButtonData("–°–±", `–°–±`),
						tgbotapi.NewInlineKeyboardButtonData("–í—Å", `–í—Å`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData(" ", `1`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `2`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `3`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `4`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `5`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `6`),
						tgbotapi.NewInlineKeyboardButtonData("1", `{"command":"day","dt":"2024.12.1","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("2", `{"command":"day","dt":"2024.12.2","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("3", `{"command":"day","dt":"2024.12.3","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("4", `{"command":"day","dt":"2024.12.4","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("5", `{"command":"day","dt":"2024.12.5","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("6", `{"command":"day","dt":"2024.12.6","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("7", `{"command":"day","dt":"2024.12.7","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("8", `{"command":"day","dt":"2024.12.8","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("9", `{"command":"day","dt":"2024.12.9","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("10", `{"command":"day","dt":"2024.12.10","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("üü¢ 11", `{"command":"day","dt":"2024.12.11","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("12", `{"command":"day","dt":"2024.12.12","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("13", `{"command":"day","dt":"2024.12.13","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("14", `{"command":"day","dt":"2024.12.14","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("15", `{"command":"day","dt":"2024.12.15","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("16", `{"command":"day","dt":"2024.12.16","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("17", `{"command":"day","dt":"2024.12.17","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("18", `{"command":"day","dt":"2024.12.18","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("19", `{"command":"day","dt":"2024.12.19","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("20", `{"command":"day","dt":"2024.12.20","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("21", `{"command":"day","dt":"2024.12.21","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("22", `{"command":"day","dt":"2024.12.22","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("23", `{"command":"day","dt":"2024.12.23","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("24", `{"command":"day","dt":"2024.12.24","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("25", `{"command":"day","dt":"2024.12.25","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("26", `{"command":"day","dt":"2024.12.26","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("27", `{"command":"day","dt":"2024.12.27","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("28", `{"command":"day","dt":"2024.12.28","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("29", `{"command":"day","dt":"2024.12.29","s":0}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("30", `{"command":"day","dt":"2024.12.30","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData("31", `{"command":"day","dt":"2024.12.31","s":0}`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `1`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `2`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `3`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `4`),
						tgbotapi.NewInlineKeyboardButtonData(" ", `5`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("<", `{"command":"switch_timesheet_month","m":"2024.11","d":12}`),
						tgbotapi.NewInlineKeyboardButtonData(">", `{"command":"switch_timesheet_month","m":"2025.1","d":12}`),
					},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"appointments"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 15, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 18
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"day","dt":"2024.12.8","s":0}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–î–µ–Ω—å 08.12.2024\n–í—Ä–∞—á –ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í.\n–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.\n\n" +
					"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤—Ä–∞—á–∞ –ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í. –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å. üòîüóìÔ∏è"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"calendar"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 15, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 19
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"day","dt":"2024.12.11","s":0}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–î–µ–Ω—å 11.12.2024\n–í—Ä–∞—á –ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í.\n–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è. üïí‚ú®"
				keyboard := tgbotapi.InlineKeyboardMarkup{}
				keyboard.InlineKeyboard = [][]tgbotapi.InlineKeyboardButton{
					{
						tgbotapi.NewInlineKeyboardButtonData("11:10 - 11:40", `{"command":"interval","s":"11:10"}`),
						tgbotapi.NewInlineKeyboardButtonData("11:40 - 12:10", `{"command":"interval","s":"11:40"}`),
						tgbotapi.NewInlineKeyboardButtonData("12:10 - 12:40", `{"command":"interval","s":"12:10"}`),
					},
					{
						tgbotapi.NewInlineKeyboardButtonData("12:40 - 13:10", `{"command":"interval","s":"12:40"}`),
						tgbotapi.NewInlineKeyboardButtonData("13:10 - 13:40", `{"command":"interval","s":"13:10"}`),
						tgbotapi.NewInlineKeyboardButtonData("13:40 - 14:10", `{"command":"interval","s":"13:40"}`),
					},
					{tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", `{"command":"back","b":"calendar"}`)},
				}
				exceptedMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, 15, text, keyboard)
				return []tgbotapi.Chattable{exceptedMsg}
			},
		},
		{ // 21
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"interval","s":"12:40"}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				return []tgbotapi.Chattable{nil}
			},
		},
		{ // 21
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"approve","d":"register"}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				return []tgbotapi.Chattable{nil}
			},
		},
		{ // 22
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 22, "/myrecords")
				message.Entities = []tgbotapi.MessageEntity{
					{Type: "bot_command", Length: len([]rune(message.Text))},
				}
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				text := `–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–ª–∏–Ω–∏–∫—É "–û–ª–∏–º–ø" –≤ –°–æ—Ñ—Ä–∏–Ω–æ

–ó–∞–ø–∏—Å—å ‚Ññ1
üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b><i>2024-11-09 18:00</i></b>
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: <b><i>–ü–æ–¥–∞–µ–≤–∞ –°.–ï. - –¢–µ—Ä–∞–ø–µ–≤—Ç—ã</i></b>
ü¶∑ –ù–∞ –ø—Ä–∏–µ–º: <b><i>–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å. (0 –º–∏–Ω)</i></b>

–ó–∞–ø–∏—Å—å ‚Ññ2
üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b><i>2024-12-11 12:40</i></b>
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: <b><i>–ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í. - –ì–∏–≥–∏–µ–Ω–∏—Å—Ç—ã</i></b>
ü¶∑ –ù–∞ –ø—Ä–∏–µ–º: <b><i>–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å. (0 –º–∏–Ω)</i></b>`

				msg := tgbotapi.NewMessage(chatID, text)
				msg.ParseMode = HTML
				return []tgbotapi.Chattable{msg}
			},
		},
		{ // 23
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 23, "/delete_record")
				message.Entities = []tgbotapi.MessageEntity{
					{Type: "bot_command", Length: len([]rune(message.Text))},
				}
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				text := "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ‚ùå"

				msg := tgbotapi.NewMessage(chatID, text)
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData(
						"–ó–∞–ø–∏—Å—å ‚Ññ1: 2024-11-09 18:00 –ü–æ–¥–∞–µ–≤–∞ –°.–ï.",
						`{"command":"del_r","r":1}`),
					},
					[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData(
						"–ó–∞–ø–∏—Å—å ‚Ññ2: 2024-12-11 12:40 –ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í.",
						`{"command":"del_r","r":2}`),
					},
				)
				return []tgbotapi.Chattable{msg}
			},
		},
		{ // 24
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"del_r","r":1}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := `–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî 2024-11-09 18:00, –ü–æ–¥–∞–µ–≤–∞ –°.–ï. üóìÔ∏è.

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? ‚úÖ`

				msg := tgbotapi.NewMessage(chatID, text)
				keyboard := tgbotapi.NewReplyKeyboard([]tgbotapi.KeyboardButton{
					tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
					tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"),
				})
				keyboard.OneTimeKeyboard = true
				msg.ReplyMarkup = keyboard
				return []tgbotapi.Chattable{msg}
			},
		},
		{ // 25
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 25, "–Ω–µ—Ç")
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				text := `–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ‚Äî 2024-11-09 18:00, –ü–æ–¥–∞–µ–≤–∞ –°.–ï., –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå`

				msg := tgbotapi.NewMessage(chatID, text)
				return []tgbotapi.Chattable{msg}
			},
		},
		{ // 26
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"del_r","r":2}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := `–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî 2024-12-11 12:40, –ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í. üóìÔ∏è.

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? ‚úÖ`

				msg := tgbotapi.NewMessage(chatID, text)
				keyboard := tgbotapi.NewReplyKeyboard([]tgbotapi.KeyboardButton{
					tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
					tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"),
				})
				keyboard.OneTimeKeyboard = true
				msg.ReplyMarkup = keyboard
				return []tgbotapi.Chattable{msg}
			},
		},
		{ // 27
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 25, "–¥–∞")
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				text := `–ó–∞–ø–∏—Å—å ‚Äî 2024-12-11 12:40, –ù–æ–≤–∏–∫–æ–≤–∞ –ù.–í., —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ`

				msg := tgbotapi.NewMessage(chatID, text)
				return []tgbotapi.Chattable{msg}
			},
		},
		{ // 28
			userMessage: func() tgbotapi.Update {
				callbackQuery := createTestQuery(chatID, 15, `{"command":"del_r","r":123325346}`)
				return tgbotapi.Update{CallbackQuery: callbackQuery}
			},
			expected: func() []tgbotapi.Chattable {
				text := `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï`
				msg := tgbotapi.NewMessage(chatID, text)
				return []tgbotapi.Chattable{msg}
			},
		},
	}
	checkCases(t, router, mockBot, chatID, testCases)
	_ = clearAllTables(db)
	stopChan <- struct{}{}
}

func TestChangeName(t *testing.T) {
	var chatID int64 = 1
	var router, mockBot, db = createBot()
	defer func(testDB *sql.DB) {
		_ = testDB.Close()
	}(db)

	err := clearAllTables(db)
	if err != nil {
		fmt.Println(err)
	}

	stopChan := make(chan struct{})
	go router.StartListening(stopChan)

	testCases := []TestCase{
		{ // 1
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 2, "/change_name")
				message.Entities = []tgbotapi.MessageEntity{
					{Type: "bot_command", Length: len([]rune(message.Text))},
				}
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				expectedMessage := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±. –û–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>")
				phoneButton := tgbotapi.KeyboardButton{
					Text:           "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
					RequestContact: true,
				}
				keyboard := tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(phoneButton),
				)
				keyboard.OneTimeKeyboard = true
				expectedMessage.ReplyMarkup = keyboard
				expectedMessage.ParseMode = HTML
				return []tgbotapi.Chattable{expectedMessage}
			},
		},
		{ // 2
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 4, "")
				message.Contact = createContact()
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				return []tgbotapi.Chattable{tgbotapi.NewMessage(chatID, "üóù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")}
			},
		},
		{ // 3
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 5, "/cancel")
				message.Entities = []tgbotapi.MessageEntity{
					{Type: "bot_command", Length: len([]rune(message.Text))},
				}
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				message := tgbotapi.NewMessage(chatID, "–ú—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ")
				message.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
				return []tgbotapi.Chattable{message}
			},
		},
		{ // 4
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 6, "/change_name")
				message.Entities = []tgbotapi.MessageEntity{
					{Type: "bot_command", Length: len([]rune(message.Text))},
				}
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				return []tgbotapi.Chattable{tgbotapi.NewMessage(chatID, "üóù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")}
			},
		},
		{ // 5
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 7, "Donald")
				message.Contact = createContact()
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				return []tgbotapi.Chattable{tgbotapi.NewMessage(chatID, "üóù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.")}
			},
		},
		{ // 6
			userMessage: func() tgbotapi.Update {
				message := createTestMessage(chatID, 8, "Trump")
				message.Contact = createContact()
				return tgbotapi.Update{Message: message}
			},
			expected: func() []tgbotapi.Chattable {
				message := tgbotapi.NewMessage(chatID, "üéâ –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b><i>Trump Donald</i></b>!")
				message.ParseMode = HTML
				return []tgbotapi.Chattable{message}
			},
		},
	}
	checkCases(t, router, mockBot, chatID, testCases)
	stopChan <- struct{}{}
}
